#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import re
from collections import defaultdict
import json
import os
from sklearn.preprocessing import MultiLabelBinarizer
import pandas as pd
from scipy import sparse
from networkx import convert_matrix
import networkx as nx
import matplotlib.pyplot as plt


# In[45]:


apk_address='/datasets/dsc180a-wi20-public/Malware/testing/malware/90b8b78626470c30c52ae86c508ca474/smali/android/support/v4/a'
os.listdir(apk_address)


# In[46]:


apk_address='/datasets/dsc180a-wi20-public/Malware/testing/malware/'


# In[47]:


output=extract_features_for_app(apk_address)


# In[51]:


ass2_mal_json='/home/sic100/ass2_mal_json'


# In[52]:


output_name=['API_package', 'API_invoke_methods', 'app_API', 'API_codeblocks', 'all_API']
for i in range(len(output)):
    data=output[i]
    with open(ass2_mal_json+'/'+output_name[i]+'.json', 'w+') as f:
        json.dump(data, f)
        print(output_name[i], "->complete")


# In[59]:


path='./ass2_mal_json/API_package'+'.json'
with open(path, 'r') as inputfile:
    API_package_m=json.load(inputfile)
path='./ass2_mal_json/API_invoke_methods'+'.json'
with open(path, 'r') as inputfile:
    API_invoke_methods_m=json.load(inputfile)
path='./ass2_mal_json/app_API'+'.json'
with open(path, 'r') as inputfile:
    app_API_m=json.load(inputfile)
path='./ass2_mal_json/API_codeblocks'+'.json'
with open(path, 'r') as inputfile:
    API_codeblocks_m=json.load(inputfile)  
path='./ass2_mal_json/all_API'+'.json'
with open(path, 'r') as inputfile:
    all_API_m=json.load(inputfile)


# In[62]:


path='./ass2_json/API_package'+'.json'
with open(path, 'r') as inputfile:
    API_package_b=json.load(inputfile)
path='./ass2_json/API_invoke_methods'+'.json'
with open(path, 'r') as inputfile:
    API_invoke_methods_b=json.load(inputfile)
path='./ass2_json/app_API'+'.json'
with open(path, 'r') as inputfile:
    app_API_b=json.load(inputfile)
path='./ass2_json/API_codeblocks'+'.json'
with open(path, 'r') as inputfile:
    API_codeblocks_b=json.load(inputfile)  
path='./ass2_json/all_API'+'.json'
with open(path, 'r') as inputfile:
    all_API_b=json.load(inputfile)


# In[64]:


all_API=np.unique(all_API_m+all_API_b)


# In[65]:


len(all_API)


# In[67]:


len(all_API_b)


# In[70]:


def get_A(all_API, app_API):
    app_api_df=pd.DataFrame({'app': list(app_API.keys()), 'api list': list(app_API.values())})
    mlb = MultiLabelBinarizer()
    mlb.fit([all_API])
    one_hot=mlb.transform(app_api_df['api list'])
    A=pd.DataFrame(index=list(app_API.keys()), columns=all_API, data=one_hot)
    return A


# In[ ]:





# In[ ]:





# In[163]:


def get__smaller_A(app_API_m, app_API_b, all_API_m, all_API_b):
    m=pd.DataFrame(all_API_m)
    b=pd.DataFrame(all_API_b)
    smaller_api=pd.merge(b,m, how='outer')[0].tolist()
    app_api_df_m=pd.DataFrame({'app': list(app_API_m.keys()), 'api list': list(app_API_m.values())})

    app_api_df_b=pd.DataFrame({'app': list(app_API_b.keys()), 'api list': list(app_API_b.values())})

    app_api_df=pd.concat([app_api_df_m, app_api_df_b], axis=0)
    mlb = MultiLabelBinarizer()
    mlb.fit([smaller_api])
    one_hot=mlb.transform(app_api_df['api list'])
    smaller_A=pd.DataFrame(index=app_api_df['app'], columns=smaller_api, data=one_hot)
    smaller_A['label']=[-1]*app_api_df_m.shape[0]+[1]*app_api_df_b.shape[0]
    return smaller_A


# In[164]:


smaller_A=get__smaller_A(app_API_m, app_API_b, all_API_m, all_API_b)


# In[166]:


smaller_A


# In[129]:


A_m=get_A(all_API, app_API_m)


# In[130]:


A_m['label']=[-1]*A_m.shape[0]


# In[131]:


A_m


# In[132]:


A_b=get_A(all_API, app_API_b)


# In[133]:


A_b['label']=[1]*A_b.shape[0]


# In[134]:


A_b


# In[135]:


from sklearn.svm import SVC
from sklearn.model_selection import train_test_split


# In[136]:


A=pd.concat([A_m,A_b], axis=0)


# In[137]:


A


# In[167]:


train, test = train_test_split(smaller_A, test_size=0.333)


# In[168]:


clf = SVC()
clf.fit(X=train.drop(columns=['label']), y=train['label'])


# In[172]:


prediction=clf.predict(test.drop(columns=['label']))


# In[173]:


score=sum([1 if prediction[i]==test['label'][i] else 0 for i in range(len(prediction))])/len(prediction)


# In[175]:


score


# In[ ]:




